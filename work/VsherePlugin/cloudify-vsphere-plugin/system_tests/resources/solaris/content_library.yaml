tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5.5/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.14.0/plugin.yaml
  - ../../../plugin.yaml

inputs:

  vcenter_user:
    type: string

  vcenter_password:
    type: string

  vcenter_ip:
    type: string

  vcenter_port:
    type: string
    default: 443

  vcenter_datacenter:
    type: string
    description: >
       vcenter datacenter
    default: Datacenter

  vcenter_resource_pool:
    description: >
      Resource pool name
    default: Resources

  vcenter_datastore:
    type: string
    description: >
      vcenter datastore
    default: datastore1

  vcenter_hypervisor_host:
    type: string
    description: >
      vcenter host

  vsphere_auto_placement:
    type: string
    default: true

  template_library:
    type: string
    description: >
      "Custom Solaris template library"
    default: "Solaris"

  template_name:
    type: string
    description: >
      "Custom Solaris template template name"
    default: "Solaris"

  vm_ip:
    type: string
    description: >
      VM ip
    default: 172.16.168.156

  vm_netmask:
    type: string
    description: >
      VM netmask
    default: 255.255.255.0

  vm_gateway:
    type: string
    description: >
      VM gateway
    default: 172.16.168.1

  vm_user:
    type: string
    description: >
      VM user
    default: root

  vm_password:
    type: string
    description: >
      VM password
    default: root

###############################################################################
#  DSL section
###############################################################################
dsl_definitions:

  connection_config: &connection_config
    username: { get_input: vcenter_user }
    password: {get_input: vcenter_password }
    host: { get_input: vcenter_ip }
    port: { get_input: vcenter_port }
    datacenter_name: {get_input: vcenter_datacenter }
    resource_pool_name: { get_input: vcenter_resource_pool }
    auto_placement: { get_input: vsphere_auto_placement }
    allow_insecure: true

node_templates:

  vm_folder:
    type: cloudify.vsphere.nodes.VMFolder
    properties:
      use_external_resource: true
      name: vm
      connection_config: *connection_config

  resource_pool:
    type: cloudify.vsphere.nodes.ResourcePool
    properties:
      use_external_resource: true
      name: { get_input: vcenter_resource_pool }
      connection_config: *connection_config

  datastore:
    type: cloudify.vsphere.nodes.Datastore
    properties:
      use_external_resource: true
      name: { get_input: vcenter_datastore }
      connection_config: *connection_config

  hypervisor_host:
    type: cloudify.vsphere.nodes.Host
    properties:
      use_external_resource: true
      name: { get_input: vcenter_hypervisor_host }
      connection_config: *connection_config

  network:
    type: cloudify.vsphere.nodes.Network
    properties:
      use_external_resource: true
      network:
        name: Internal
        switch_distributed: false
      connection_config: *connection_config

  vm_content_library:
    type: cloudify.vsphere.nodes.ContentLibraryDeployment
    properties:
      library_name:  { get_input: template_library }
      template_name: { get_input: template_name }
      connection_config: *connection_config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            target:
              folder_id: { get_attribute: [vm_folder, vsphere_vm_folder_id] }
              host_id: { get_attribute: [hypervisor_host, vsphere_hypervisor_host_id] }
              resource_pool_id: { get_attribute: [resource_pool, vsphere_resource_pool_id] }
            deployment_spec:
              default_datastore_id: { get_attribute: [datastore, vsphere_datastore_id] }
              network_mappings:
              - key: 'VM Network'
                value: { get_attribute: [network, vsphere_network_id, 0] }
    relationships:
    - target: datastore
      type: cloudify.relationships.depends_on
    - target: vm_folder
      type: cloudify.relationships.depends_on
    - target: resource_pool
      type: cloudify.relationships.depends_on
    - target: hypervisor_host
      type: cloudify.relationships.depends_on
    - target: network
      type: cloudify.relationships.depends_on

  vm_instance:
    type: cloudify.vsphere.nodes.Server
    properties:
      use_external_resource: true
      connection_config: *connection_config
      os_family: solaris
      wait_ip: true
      agent_config:
        install_method: none
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            server:
              name: { get_attribute: [vm_content_library, vm_name] }
            extra_config:
              machine.id: { concat: [ 'ip=', { get_input: vm_ip }, '&netmask=', { get_input: vm_netmask }, '&gateway=', { get_input: vm_gateway } ] }
        stop:
          inputs:
            force_stop: true
        delete:
          inputs:
            force_delete: true
    relationships:
    - target: vm_content_library
      type: cloudify.relationships.depends_on

  state_check:
    type: cloudify.terminal.raw
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            terminal_auth:
              user: { get_input: vm_user }
              password: { get_input: vm_password }
              ip: { get_attribute: [vm_instance, ip] }
              exit_command: quit
              promt_check:
                - '>'
            calls:
              - action: show ip
                save_to: ips
    relationships:
    - target: vm_instance
      type: cloudify.relationships.depends_on
